name: Sync CMS Data to HTML

on:
  push:
    paths:
      - 'content/homepage.yml'
      - 'content/**'

permissions:
  contents: write
  actions: read

jobs:
  sync-data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install yq for YAML parsing
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Sync homepage data to index.html
        run: |
          if [ -f "content/homepage.yml" ]; then
            echo "🔄 Syncing homepage data to index.html..."
            
            # YAML에서 데이터 추출
            HERO_TITLE=$(yq e '.hero.title' content/homepage.yml)
            HERO_SUBTITLE=$(yq e '.hero.subtitle' content/homepage.yml)
            HERO_DESCRIPTION=$(yq e '.hero.description' content/homepage.yml)
            HERO_CTA_TEXT=$(yq e '.hero.cta_text' content/homepage.yml)
            HERO_CTA_LINK=$(yq e '.hero.cta_link' content/homepage.yml)
            HERO_BG_IMAGE=$(yq e '.hero.background_image' content/homepage.yml)
            
            REP_TITLE=$(yq e '.representative.title' content/homepage.yml)
            REP_NAME=$(yq e '.representative.name' content/homepage.yml)
            REP_POSITION=$(yq e '.representative.position' content/homepage.yml)
            REP_PHOTO=$(yq e '.representative.photo' content/homepage.yml)
            
            # 인사말 메시지들 추출 (첫 3개)
            MSG1=$(yq e '.representative.messages[0]' content/homepage.yml)
            MSG2=$(yq e '.representative.messages[1]' content/homepage.yml)
            MSG3=$(yq e '.representative.messages[2]' content/homepage.yml)
            
            echo "✅ Data extracted from YAML"
            echo "Hero Title: $HERO_TITLE"
            echo "Hero Subtitle: $HERO_SUBTITLE"
            
            # index.html 백업
            cp index.html index.html.backup
            
            # 복잡한 히어로 섹션 구조에 맞는 업데이트
            # 히어로 제목 업데이트 (복잡한 span 구조 유지하면서 부제목만 변경)
            sed -i "s|<span style=\"font-weight: 700;\">자유</span><span style=\"font-weight: 200;\">와</span><span style=\"font-weight: 700;\">혁신</span><br>.*|<span style=\"font-weight: 700;\">자유</span><span style=\"font-weight: 200;\">와</span><span style=\"font-weight: 700;\">혁신</span><br>$HERO_SUBTITLE|g" index.html
            
            # 히어로 설명 업데이트 (인라인 스타일 포함된 p 태그)
            sed -i 's|<p style="font-size: clamp(1\.1rem, 3vw, 1\.5rem); margin-bottom: 2rem; font-weight: 400; line-height: 1\.6; font-family: '"'"'Inter'"'"', '"'"'Noto Sans KR'"'"', sans-serif; max-width: 90%;">.*</p>|<p style="font-size: clamp(1.1rem, 3vw, 1.5rem); margin-bottom: 2rem; font-weight: 400; line-height: 1.6; font-family: '"'"'Inter'"'"', '"'"'Noto Sans KR'"'"', sans-serif; max-width: 90%;">'$HERO_DESCRIPTION'</p>|g' index.html
            
            # CTA 버튼 업데이트 (인라인 스타일 포함)
            sed -i 's|<a href="[^"]*" target="_blank" style="[^"]*"[^>]*>[^<]*</a>|<a href="'$HERO_CTA_LINK'" target="_blank" style="background-color: #A50034; color: white; padding: 0.875rem 2rem; font-size: clamp(1rem, 2.5vw, 1.125rem); font-weight: 500; border: none; cursor: pointer; transition: all 0.3s ease; font-family: '"'"'Inter'"'"', '"'"'Noto Sans KR'"'"', sans-serif; margin-top: 1rem; text-decoration: none; display: inline-block;" onmouseover="this.style.backgroundColor='"'"'#8B002C'"'"'" onmouseout="this.style.backgroundColor='"'"'#A50034'"'"'">'$HERO_CTA_TEXT'</a>|g' index.html
            
            # 대표 인사말 섹션 업데이트 (기존 방식 유지)
            sed -i "s|새로운 정치의 시작,<br>|$REP_TITLE<br>|g" index.html
            sed -i "s|자유와혁신 당 대표</p>|$REP_POSITION</p>|g" index.html
            sed -i "s|김○○</p>|$REP_NAME</p>|g" index.html
            
            echo "✅ index.html updated with new data"
            
            # 변경사항 확인
            if ! diff -q index.html index.html.backup > /dev/null; then
              echo "✅ Changes detected in index.html"
            else
              echo "ℹ️ No changes needed in index.html"
            fi
            
            rm index.html.backup
          else
            echo "❌ content/homepage.yml not found"
          fi

      - name: Commit and push if changed
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add index.html
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "🔄 자동 동기화: CMS 홈페이지 데이터 → index.html 반영"
            git push
            echo "✅ Changes pushed to repository"
          fi 